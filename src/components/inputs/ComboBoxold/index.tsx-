import * as React from 'react'
import TextField from '@mui/material/TextField'
import Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'
import Popper from '@mui/material/Popper'
import { styled } from '@mui/material/styles'
import { MakeListbox } from './adapter'

function random (length: number) {
  const characters =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  let result = ''

  for (let i = 0; i < length; i += 1) {
    result += characters.charAt(Math.floor(Math.random() * characters.length))
  }

  return result
}

const StyledPopper = styled(Popper)({
  [`& .${autocompleteClasses.listbox}`]: {
    boxSizing: 'border-box',
    '& ul': {
      padding: 0,
      margin: 0
    }
  }
})

const OPTIONS = Array.from(new Array(10000))
  .map(() => random(10 + Math.ceil(Math.random() * 20)))
  .sort((a: string, b: string) => a.toUpperCase().localeCompare(b.toUpperCase()))

export const ComboBox = () => {
  const [hasNextPage, setHasNextPage] = React.useState(true)
  const [isNextPageLoading, setIsNextPageLoading] = React.useState(false)
  const [items, setItems] = React.useState<any>([])

  const loadNextPage = (...args: any[]) => {
    console.log('loadNextPage', ...args)
    setIsNextPageLoading(true)
    setTimeout(() => {
      setHasNextPage(items.length < 10000)
      setIsNextPageLoading(false)
      setItems(
        [...items].concat(
          new Array(30).fill(true).map((_, i) => ({ name: OPTIONS.at(i) } as any))
        )
      )
    }, 2500)
  }

  const ListboxComponent = MakeListbox({
    hasNextPage,
    isNextPageLoading,
    loadNextPage
  })

  React.useEffect(() => {
    if (items.length === 0) {
      loadNextPage()
    }
  }, [items])

  return (
    <Autocomplete
      id="virtualize-demo"
      sx={{ width: 300 }}
      disableListWrap
      PopperComponent={StyledPopper}
      ListboxComponent={ListboxComponent}
      options={items}
      groupBy={(option: string) => option?.[0]?.toUpperCase() ?? ''}
      renderInput={(params) => <TextField {...params} label="10,000 options" />}
      renderOption={(props, option) => [props, option] as React.ReactNode}
      // TODO: Post React 18 update - validate this conversion, look like a hidden bug
      renderGroup={(params) => params as unknown as React.ReactNode}
    />
  )
}
